##2023.4.21##JUAN_ZIBO##

import numpy as np

#Define robotic arm configuration
#Define the joint angles of the robot arm
theta1 = np.pi/4
theta2 = np.pi/4
theta3 = np.pi/4
theta4 = np.pi/4
theta5 = np.pi/4
theta6 = np.pi/4

theta = [theta1, theta2, theta3, theta4, theta5, theta6]

link_lengths = [0, 1, 1, 1, 0, 0]

if len(theta) != len(link_lengths):
    raise ValueError("Number of joint angles should match number of link lengths.")


######THIS IS THE FORWARD KINEMATICS CODE######
def forward_kinematics(theta, link_lengths):

    T = np.identity(4)
    
    #for 6DOF robotic arm
    for i in range(6):

        # Denavit-Hartenberg parameters
        theta = theta[i]
        alpha = 0
        d = link_lengths[i]
        a= 0
    
        Ti = np.array([
            [np.cos(theta[i]), -np.sin(theta[i])*np.cos(alpha[i]), np.sin(theta[i])*np.sin(alpha[i]), a[i]*np.cos(theta[i])],
            [np.sin(theta[i]), np.cos(theta[i])*np.cos(alpha[i]), -np.cos(theta[i])*np.sin(alpha[i]), a[i]*np.sin(theta[i])],
            [0, np.sin(alpha[i]), np.cos(alpha[i]), d[i]],
            [0, 0, 0, 1]
        ])
        T = np.dot(T, Ti)
    return T

   
    # Compute the end-effector position using forward kinematics
    T = forward_kinematics(theta, link_lengths)
    end_effector_pose = T[-1][:3, 3]

    # Print the end-effector position
    print("End-effector position:", end_effector_pose)

######################################################################
######INVERSE KINEMATICS FUNCTION######
import numpy as np

#desired end position x, y, z
end_effector_position = [0, 0, 0]

#Define the link lengths of the robot arm
link_lengths = [0, 1, 1, 1, 0, 0]

# Define the DH parameters of the robot arm
d = [0, 0, 0, 0, 0, 0]
a = [0, link_lengths[1], link_lengths[2], link_lengths[3], 0, 0]
alpha = [np.pi/2, 0, 0, 0, np.pi/2, -np.pi/2]

# Compute the inverse kinematics to reach a desired end-effector position
def inverse_kinematics(end_effector_position, link_lengths):
    xd, yd, zd = end_effector_position
    0, a1, a2, a3, 0, 0 = link_lengths

    joint_limits = [
        (-np.pi, np.pi),  # Joint 1 limits
        (-np.pi/2, np.pi/2),  # Joint 2 limits
        (-np.pi/2, np.pi/2),  # Joint 3 limits
        (-np.pi, np.pi),  # Joint 4 limits
        (-np.pi/2, np.pi/2),  # Joint 5 limits
        (-np.pi, np.pi)  # Joint 6 limits
    ]
    # Check joint limits
    for i, (theta_min, theta_max) in enumerate(joint_limits):
        if joint_angles[i] < theta_min or joint_angles[i] > theta_max:
            return None  # Solution violates joint limits

    # Calculate joint angles
    theta1 = np.arctan2(yd, xd)

    r = np.sqrt(xd**2 + yd**2)
    d = np.sqrt(rd**2 + zd**2)

    cos_theta3 = (a1**2 + a2**2 - a3**2 + d**2) / (2 * a1 * a2)
    sin_theta3 = np.sqrt(1 - cos_theta3**2)

    theta2 = np.arctan2(zd, r) - np.arctan2(a2 * sin_theta3, a1 + a2 * cos_theta3)
    theta3 = np.arctan2(sin_theta3, cos_theta3)
    joint_angles = [theta1, theta2, theta3]

    return joint_angles

def forward_kinematics(theta, link_lengths):

    T = np.identity(4)
    
    #for 6DOF robotic arm
    for i in range(6):

        # Denavit-Hartenberg parameters
        theta = theta[i]
        alpha = 0
        d = link_lengths[i]
        a= 0
    
        Ti = np.array([
            [np.cos(theta[i]), -np.sin(theta[i])*np.cos(alpha[i]), np.sin(theta[i])*np.sin(alpha[i]), a[i]*np.cos(theta[i])],
            [np.sin(theta[i]), np.cos(theta[i])*np.cos(alpha[i]), -np.cos(theta[i])*np.sin(alpha[i]), a[i]*np.sin(theta[i])],
            [0, np.sin(alpha[i]), np.cos(alpha[i]), d[i]],
            [0, 0, 0, 1]
        ])
        T = np.dot(T, Ti)
    return T

   
    # Compute the end-effector position using forward kinematics
    T = forward_kinematics(theta, link_lengths)
    end_effector_pose = T[-1][:3, 3]
inverse_kinematics(end_effector_position, link_lengths)
forward_kinematics(joint_angles, link_lengths)


###from here not sure what to do
    # Initialize joint angles
    theta = [0, 0, 0, 0, 0, 0]

    # Define the target position and orientation using homogeneous transformation
    Td = np.array([
        [1, 0, 0, xd],
        [0, 1, 0, yd],
        [0, 0, 1, zd],
        [0, 0, 0, 1]
    ])


    # Define the initial position and orientation using homogeneous transformation
    T0 = np.identity(4)
    # Set maximum number of iterations and error tolerance
    max_iter = 100
    error_tol = 1e-5

    # Perform iterative inverse kinematics
    for i in range(max_iter):
        # Compute the current end-effector position and orientation using forward kinematics
        T = forward_kinematics(theta)
        x, y, z = T[:3, 3]

        # Compute the current position error
        error = np.linalg.norm(pos - np.array([x, y, z]))
        if error < error_tol:
            # If error is below tolerance, stop iteration and return the joint angles
            return theta

        # Compute the Jacobian matrix
        J = np.zeros((6, 6))
        for j in range(6):
            theta_j = theta.copy()
            theta_j[j] += 1e-6
            xj, yj, zj = forward_kinematics(theta_j)[:3, 3]
            dxj = xj - x
            dyj = yj - y
            dzj = zj - z
            J[:, j] = np.array([dxj, dyj, dzj, 0, 0, 0])
        # Compute the pseudoinverse of the Jacobian matrix
        J_pinv = np.linalg.pinv(J)
        
        # Compute the joint angle correction
        dtheta = np.dot(J_pinv, (pos - np.array([x, y, z, 0, 0, 0])))

        # Update the joint angles 
        theta += dtheta

#Explanations by Chat-GPT#
#In this code, the ‘J_pinv’ matrix is the pseudoinverse of the Jacobian matrix ‘J’. 
#The joint angle correction ‘dtheta’ is computed as the product of the pseudoinverse of the Jacobian matrix 
#and the position error between the desired end-effector position and the current end-effector position. 
#The joint angles ‘theta’ are updated by adding the joint angle correction ‘dtheta’ to the current joint angles. 
#The updated joint angles are used in the next iteration of the loop to compute the new end-effector position and orientation using forward kinematics, 
#and the process repeats until convergence is achieved or the maximum number of iterations is reached.


#NOTE#
#The initial parts of the two pieces of codes that define all the parameters for the forward & inverse functions may be different, should make them the same.
